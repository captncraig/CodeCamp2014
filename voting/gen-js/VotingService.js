//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

VotingService_GetPossibleVotes_args = function(args) {
};
VotingService_GetPossibleVotes_args.prototype = {};
VotingService_GetPossibleVotes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_GetPossibleVotes_args.prototype.write = function(output) {
  output.writeStructBegin('VotingService_GetPossibleVotes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingService_GetPossibleVotes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
VotingService_GetPossibleVotes_result.prototype = {};
VotingService_GetPossibleVotes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_GetPossibleVotes_result.prototype.write = function(output) {
  output.writeStructBegin('VotingService_GetPossibleVotes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingService_PlaceVote_args = function(args) {
  this.vote = null;
  if (args) {
    if (args.vote !== undefined) {
      this.vote = args.vote;
    }
  }
};
VotingService_PlaceVote_args.prototype = {};
VotingService_PlaceVote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.vote = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_PlaceVote_args.prototype.write = function(output) {
  output.writeStructBegin('VotingService_PlaceVote_args');
  if (this.vote !== null && this.vote !== undefined) {
    output.writeFieldBegin('vote', Thrift.Type.STRING, 1);
    output.writeString(this.vote);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingService_PlaceVote_result = function(args) {
};
VotingService_PlaceVote_result.prototype = {};
VotingService_PlaceVote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_PlaceVote_result.prototype.write = function(output) {
  output.writeStructBegin('VotingService_PlaceVote_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingService_GetVoteCounts_args = function(args) {
};
VotingService_GetVoteCounts_args.prototype = {};
VotingService_GetVoteCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_GetVoteCounts_args.prototype.write = function(output) {
  output.writeStructBegin('VotingService_GetVoteCounts_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingService_GetVoteCounts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
VotingService_GetVoteCounts_result.prototype = {};
VotingService_GetVoteCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.success = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readI32().value;
          this.success[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VotingService_GetVoteCounts_result.prototype.write = function(output) {
  output.writeStructBegin('VotingService_GetVoteCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter16 in this.success)
    {
      if (this.success.hasOwnProperty(kiter16))
      {
        var viter17 = this.success[kiter16];
        output.writeString(kiter16);
        output.writeI32(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VotingServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
VotingServiceClient.prototype = {};
VotingServiceClient.prototype.GetPossibleVotes = function() {
  this.send_GetPossibleVotes();
  return this.recv_GetPossibleVotes();
};

VotingServiceClient.prototype.send_GetPossibleVotes = function() {
  this.output.writeMessageBegin('GetPossibleVotes', Thrift.MessageType.CALL, this.seqid);
  var args = new VotingService_GetPossibleVotes_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

VotingServiceClient.prototype.recv_GetPossibleVotes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VotingService_GetPossibleVotes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetPossibleVotes failed: unknown result';
};
VotingServiceClient.prototype.PlaceVote = function(vote) {
  this.send_PlaceVote(vote);
  this.recv_PlaceVote();
};

VotingServiceClient.prototype.send_PlaceVote = function(vote) {
  this.output.writeMessageBegin('PlaceVote', Thrift.MessageType.CALL, this.seqid);
  var args = new VotingService_PlaceVote_args();
  args.vote = vote;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

VotingServiceClient.prototype.recv_PlaceVote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VotingService_PlaceVote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
VotingServiceClient.prototype.GetVoteCounts = function() {
  this.send_GetVoteCounts();
  return this.recv_GetVoteCounts();
};

VotingServiceClient.prototype.send_GetVoteCounts = function() {
  this.output.writeMessageBegin('GetVoteCounts', Thrift.MessageType.CALL, this.seqid);
  var args = new VotingService_GetVoteCounts_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

VotingServiceClient.prototype.recv_GetVoteCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VotingService_GetVoteCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetVoteCounts failed: unknown result';
};
